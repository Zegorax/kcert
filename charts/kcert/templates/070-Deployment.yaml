apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ required "names.deployment is required" .Values.names.deployment }}
  namespace: {{ .Release.Namespace | default "default" }}
  labels:
    app: {{ required "names.app is required" .Values.names.app }}
{{- if .Values.forHelm }}
    app.kubernetes.io/name: {{ .Chart.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
{{- end }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ required "names.app is required" .Values.names.app }}
  template:
    metadata:
      labels:
        app: {{ required "names.app is required" .Values.names.app }}
    spec:
      serviceAccountName: {{ required "names.serviceAccount is required" .Values.names.serviceAccount }}
      containers:
      - name: kcert
        image: {{ required "kcertImage is required" .Values.kcertImage }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        ports:
        - containerPort: 80
          name: http
        - containerPort: 8080
          name: http-admin
        {{- if .Values.resources }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        {{- end }}
        env:
        - name: KCERT__NAMESPACE
          value: {{ .Release.Namespace | default "default" }}
        - name: ACME__DIRURL
          # https://acme-staging-v02.api.letsencrypt.org/directory or https://acme-v02.api.letsencrypt.org/directory
          value: {{ required "acmeDirUrl is required" .Values.acmeDirUrl }}
        - name: ACME__TERMSACCEPTED
          # You must set this to "true" to indicate your acceptance of Let's Encrypt's terms of service (https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf)
          value: {{ required "acmeTermsAccepted is required" .Values.acmeTermsAccepted | quote }}
        - name: ACME__EMAIL
          # Your email address for Let's Encrypt and email notifications
          value: {{ required "acmeEmail is required" .Values.acmeEmail }}
{{- if .Values.smtp.host }}
        - name: SMTP__EMAILFROM
          value: {{ required "smtp.emailFrom is required" .Values.smtp.emailFrom }}
        - name: SMTP__HOST
          value: {{ required "smtp.host is required" .Values.smtp.host }}
        - name: SMTP__PORT
          value: "{{ required "smtp.port is required" .Values.smtp.port }}"
  {{- if .Values.smtp.user }}
        - name: SMTP__USER
          value: {{ required "smtp.user is required" .Values.smtp.user }}
  {{- end}}
  {{- if .Values.smtp.secret.name}}
        - name: SMTP__PASS
          valueFrom:
            secretKeyRef:
              name: {{ .Values.smtp.secret.name }}
              key: {{ .Values.smtp.secret.key }}
  {{- end}}
{{- end }}
{{- if .Values.acmeKey.secretName }}
        - name: ACME__KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.acmeKey.secretName }}"
              key: "{{ .Values.acmeKey.keyName }}"
{{- end }}
{{- if .Values.acmeEabKey.secretName }}
        - name: ACME__EABKEYID
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.acmeEabKey.secretName }}"
              key: "{{ .Values.acmeEabKey.keyIdName }}"
        - name: ACME__EABHMACKEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.acmeEabKey.secretName }}"
              key: "{{ .Values.acmeEabKey.hmacKeyName }}"
{{- end }}
{{- if .Values.showRenewButton }}
        - name: KCERT__SHOWRENEWBUTTON
          value: "{{ .Values.showRenewButton }}"
{{- end }}
{{- range $key, $value := .Values.env }}
        - name: "{{ $key }}"
          value: "{{ $value }}"
{{- end }}